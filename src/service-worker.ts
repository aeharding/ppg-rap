/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
  NetworkFirst,
  StaleWhileRevalidate,
  CacheFirst,
} from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If API request, never cache
    if (url.pathname.startsWith("/api/")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    //
    // Check for "," to exempt lat/lon paths /22.0354,-88.5532
    if (
      url.pathname.match(fileExtensionRegexp) &&
      url.pathname.indexOf(",") === -1
    ) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Cache API geocode response
registerRoute(
  new RegExp("/api/position.*"),
  new CacheFirst({
    cacheName: "apiPositionCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 24 * 7, // 7 Days
      }),
    ],
  })
);

// Cache API RAP response
registerRoute(
  new RegExp("/api/rap.*"),
  new NetworkFirst({
    cacheName: "apiRapCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 4, // 4 Hours
      }),
    ],
  })
);

// Cache API RAP response
registerRoute(
  new RegExp("/api/weather.*"),
  new NetworkFirst({
    cacheName: "apiWeatherCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 4, // 4 Hours
      }),
    ],
  })
);

// Cache API TFR response
registerRoute(
  new RegExp("/api/tfr.*"),
  new NetworkFirst({
    cacheName: "tfrCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 4, // 4 Hours
      }),
    ],
  })
);

// Cache API elevation response
registerRoute(
  new RegExp("/api/pqs.*"),
  new NetworkFirst({
    cacheName: "apiElevationCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 24 * 7, // 7 Days
      }),
    ],
  })
);

// Cache backup API elevation response
registerRoute(
  new RegExp("/api/googleelevation.*"),
  new NetworkFirst({
    cacheName: "apiGoogleElevationCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 24 * 7, // 7 Days
      }),
    ],
  })
);

// Cache aviation weather API response
registerRoute(
  new RegExp("/api/aviationweather.*"),
  new NetworkFirst({
    cacheName: "apiAviationWeatherCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 4, // 4 Hours
      }),
    ],
  })
);

// Cache aviation alerts API response
registerRoute(
  new RegExp("/api/aviationalerts.*"),
  new NetworkFirst({
    cacheName: "apiAviationAlertsCache",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 4, // 4 Hours
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
